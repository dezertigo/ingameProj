"use strict";
window.addEventListener("load", () => {
   const t = document.querySelector(".burger"),
      s = document.querySelector(".header"),
      o = document.querySelector("body"),
      i = e(".header-menu");
   function e(e) {
      e = document.querySelector(e);
      if (e) return e;
   }
   function r(e) {
      e = document.querySelectorAll(e);
      if (e) return e;
   }
   function c() {
      t.classList.contains("active") &&
         (t.classList.remove("active"),
         i.classList.remove("active"),
         s.classList.remove("active"),
         o.classList.remove("lock"),
         window.removeEventListener("scroll", c));
   }
   t &&
      o.addEventListener("click", function (e) {
         e.target.closest(".burger")
            ? t.classList.contains("active")
               ? (t.classList.remove("active"),
                 s.classList.remove("active"),
                 i.classList.remove("active"),
                 o.classList.remove("lock"))
               : (t.classList.add("active"),
                 s.classList.add("active"),
                 o.classList.add("lock"),
                 i.classList.add("active"),
                 window.addEventListener("scroll", c))
            : e.target.closest(".burger") ||
              e.target.closest(".header-menu") ||
              (t.classList.remove("active"),
              s.classList.remove("active"),
              i.classList.remove("active"),
              o.classList.remove("lock"),
              window.removeEventListener("scroll", c));
      }),
      window.innerWidth < 1e3
         ? e(".header-top__buttons").prepend(e("#cart"))
         : e(".header-menu__container").append(e("#cart"));
   {
      function l(e) {
         var t;
         e.target.closest(".spoiler__preview") &&
            (e.target.closest(".spoiler").classList.toggle("opened"),
            (t = e.target.closest(".spoiler__preview").nextElementSibling),
            e.target.closest(".spoiler").classList.contains("opened")
               ? (t.style.height = t.scrollHeight + "px")
               : (t.style.height = null));
      }
      e(".spoiler") && o.addEventListener("click", l);
   }
   if (e(".ceo")) {
      const S = document.querySelector(".ceo__btn");
      S.addEventListener("click", function (e) {
         {
            var t;
            (e.target.closest(".ceo__preview") || e.target.closest(".ceo__btn")) &&
               (e.target.closest(".ceo").classList.toggle("opened"),
               (t = document.querySelector(".ceo__preview").nextElementSibling),
               e.target.closest(".ceo").classList.contains("opened")
                  ? ((S.textContent = "Сховати"), (t.style.height = t.scrollHeight + "px"))
                  : ((t.style.height = null), (S.textContent = "Дивитись більше")));
         }
      });
   }
   var n = new Swiper(".cards__swiper", {
         speed: 500,
         slidesPerView: 1,
         initialSlide: 1,
         simulateTouch: !0,
         spaceBetween: 20,
      }),
      a = new Swiper(".hero__swiper-cards", {
         speed: 500,
         slidesPerView: 1.75,
         initialSlide: 1,
         centeredSlides: !0,
         slideToClickedSlide: !0,
         breakpoints: { 568: { slidesPerView: 2.25 }, 1e3: { slidesPerView: 3 } },
      });
   (n.controller.control = a).controller.control = n;
   let d = r(".cards .card");
   (a = r(".cards .card__content")), (n = r(".cards .card .card__preview"));
   let p = [],
      v =
         (n.forEach((e) => {
            p.push(e.scrollHeight);
         }),
         Math.max(...p));
   n = r(".cards .card__body");
   let _ = [],
      u =
         (n.forEach((e) => {
            _.push(e.scrollHeight);
         }),
         Math.max(..._)),
      g = v;
   d.forEach((e) => {
      e.style.height = v + u + "px";
   }),
      o.addEventListener("pointerover", function (e) {
         if (e.target.closest(".card")) {
            let s = e.target.closest(".card").children[1].firstElementChild.scrollHeight;
            s > g &&
               d.forEach((e) => {
                  var t = s + u;
                  (g = s), (e.style.height = t + "px");
               });
         }
      }),
      a.forEach((e) => {
         e.style.top = `calc(100% - ${v}px)`;
      });
   new Swiper(".reviews__slider", {
      loop: !0,
      speed: 500,
      slidesPerView: 1,
      initialSlide: 1,
      centeredSlides: !0,
      slideToClickedSlide: !0,
      spaceBetween: 24,
      pagination: { el: ".reviews__pagination", clickable: !0 },
      navigation: { nextEl: ".reviews__next", prevEl: ".reviews__prev" },
      breakpoints: {
         568: { slidesPerView: 1.5 },
         700: { slidesPerView: 1.9299 },
         900: { slidesPerView: 2 },
         1200: { slidesPerView: 3, spaceBetween: 20 },
      },
   });
   const w = document.querySelector(".reviews-popup"),
      m = document.querySelector(".reviews-popup__next");
   let L, b, f;
   o.addEventListener("click", function (e) {
      if (
         e.target.closest(".reviews__slide .reviews__img") ||
         e.target.closest(".reviews__slide .reviews__body--video") ||
         e.target.closest(".reviews__slide .reviews__footer-btn")
      ) {
         (L = e.target.closest(".reviews__slide").getAttribute("data-slide")),
            (b = document.querySelector(".reviews-popup__slide").getAttribute("data-popup-slide")),
            w.classList.add("active"),
            o.classList.add("lock"),
            (f = parseInt(L)),
            console.log(L, b);
         for (let e = 1; e < f; ) m.click(), ++e;
      }
      e.target.closest(".reviews-popup__close") && (w.classList.remove("active"), o.classList.remove("lock"));
   });
   new Swiper(".reviews-popup__slider", {
      loop: !0,
      speed: 500,
      slidesPerView: 1,
      initialSlide: 0,
      centeredSlides: !0,
      slideToClickedSlide: !0,
      spaceBetween: 24,
      pagination: { el: ".reviews-popup__pagination", clickable: !0 },
      navigation: { nextEl: ".reviews-popup__next", prevEl: ".reviews-popup__prev" },
   });
   function h(e) {
      "pointerdown" == e.type
         ? e.target.closest(".footer-top__subscribe a") &&
           (e.preventDefault(),
           r(".footer-top__subscribe .not")[0].classList.remove("hover"),
           r(".footer-top__subscribe .not")[1].classList.remove("hover"),
           r(".footer-top__subscribe .not")[0].classList.add("clicked"),
           r(".footer-top__subscribe .not")[1].classList.add("clicked"),
           document.body.addEventListener("pointerup", y))
         : "pointerover" == e.type &&
           e.target.closest(".footer-top__subscribe a") &&
           (r(".footer-top__subscribe .not")[0].classList.add("hover"),
           r(".footer-top__subscribe .not")[1].classList.add("hover"),
           document.body.addEventListener("pointerdown", h),
           document.body.addEventListener("pointerout", E));
   }
   function y(e) {
      console.log("up"),
         r(".footer-top__subscribe .not")[0].classList.remove("clicked"),
         r(".footer-top__subscribe .not")[1].classList.remove("clicked"),
         document.body.removeEventListener("pointerdown", h),
         document.body.removeEventListener("pointerup", y),
         document.body.removeEventListener("pointerout", E);
   }
   function E(e) {
      r(".footer-top__subscribe .not")[0].classList.remove("hover"),
         r(".footer-top__subscribe .not")[1].classList.remove("hover"),
         document.body.removeEventListener("pointerdown", h),
         document.body.removeEventListener("pointerout", E);
   }
   document.body.addEventListener("pointerover", h);
   {
      function l(e) {
         var t = document.querySelectorAll(".faq__spoiler"),
            s = document.querySelectorAll(".faq__wrapper");
         e.target.closest(".faq__spoiler") &&
            (e.target.closest(".faq__spoiler").classList.contains("opened")
               ? (e.target.closest(".faq__spoiler").classList.remove("opened"),
                 (e.target.closest(".faq__preview").nextElementSibling.style.height = null))
               : e.target.closest(".faq__spoiler") &&
                 (t.forEach(function (e) {
                    e.classList.remove("opened");
                 }),
                 s.forEach(function (e) {
                    e.style.height = null;
                 }),
                 e.target.closest(".faq__spoiler").classList.toggle("opened"),
                 (e.target.closest(".faq__preview").nextElementSibling.style.height =
                    e.target.closest(".faq__preview").nextElementSibling.scrollHeight + "px")));
      }
      e("body.quest") && o.addEventListener("click", l);
   }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
